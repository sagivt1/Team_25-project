Index: src/main/java/test/Quiz.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package test;\r\n\r\nimport Database.ZeroDawnDatabase;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class Quiz {\r\n\r\n    int Id;\r\n    String Name;\r\n    ArrayList<Question> Questions;\r\n    boolean isActive;\r\n    int grade;\r\n\r\n    public int getId() {\r\n        return Id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        Id = id;\r\n    }\r\n\r\n    public String getName() {\r\n        return Name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        Name = name;\r\n    }\r\n\r\n    public ArrayList<Question> getQuestions() {\r\n        return Questions;\r\n    }\r\n\r\n    public void setQuestions(ArrayList<Question> questions) {\r\n        Questions = questions;\r\n    }\r\n\r\n    public boolean isActive() {\r\n        return isActive;\r\n    }\r\n\r\n    public void setActive(boolean active) {\r\n        isActive = active;\r\n    }\r\n\r\n    public int getGrade() {\r\n        return grade;\r\n    }\r\n\r\n    public void setGrade(int grade) {\r\n        this.grade = grade;\r\n    }\r\n\r\n    public Quiz() {\r\n        Questions = new ArrayList<Question>();\r\n    }\r\n\r\n    public Quiz(int id, boolean isActive, int grade) {\r\n        this.Id = id;\r\n        Questions = new ArrayList<Question>();\r\n        this.isActive = isActive;\r\n        this.grade = grade;\r\n    }\r\n\r\n    public Quiz(int id, boolean isActive, String name, int grade) {\r\n        this.Name = name;\r\n        this.Id = id;\r\n        this.isActive = isActive;\r\n        this.grade = grade;\r\n    }\r\n\r\n    public Quiz(String name) {\r\n        Name = name;\r\n        Questions = new ArrayList<Question>();\r\n        isActive = true;\r\n    }\r\n\r\n    public void InitNewQuiz(){\r\n        Scanner in = new Scanner(System.in);\r\n        System.out.println(\"----Adding new Test----\");\r\n\r\n        String confirm;\r\n        do{\r\n            System.out.println(\"Enter the Test Name\");\r\n            Name = in.nextLine();\r\n            System.out.println(\"Press Y to confirm to change enter any other button\");\r\n            confirm = in.next();\r\n            confirm = confirm.toLowerCase();\r\n        }while(!confirm.equals(\"y\"));\r\n\r\n        do{\r\n            System.out.println(\"Enter for which grade for this test\");\r\n            grade = in.nextInt();\r\n            System.out.println(\"Press Y to confirm to change enter any other button\");\r\n            confirm = in.next();\r\n            confirm = confirm.toLowerCase();\r\n        }while(!confirm.equals(\"y\"));\r\n\r\n        //Question for the test\r\n        System.out.println(\"----Enter question for the test----\");\r\n        String next = \"n\";\r\n        int countQuestion = 0;\r\n        while(!next.equals(\"x\")){\r\n            String question;\r\n\r\n            do{\r\n                System.out.println(\"Enter the Question\");\r\n                question = in.next();\r\n                System.out.println(\"Press Y to confirm\");\r\n                confirm = in.next();\r\n                confirm = confirm.toLowerCase();\r\n            }while(!confirm.equals(\"y\"));\r\n\r\n            Questions.add(new Question(question));\r\n\r\n            System.out.println(\"To Enter more question Enter any button to sto Enter x\");\r\n            next = in.next();\r\n        }\r\n\r\n        AddNewQuizToDB();\r\n\r\n    }\r\n\r\n    /**\r\n     * Adding new Quiz to the database\r\n     */\r\n    public void AddNewQuizToDB()\r\n    {\r\n        Connection con = ZeroDawnDatabase.GetDbCon();\r\n\r\n        if (con == null) {\r\n            System.exit(1);\r\n        }\r\n\r\n        try{\r\n            String query = \"INSERT INTO test(is_active,test_name,grade) VALUES(?,?,?);\";\r\n            PreparedStatement stmt = con.prepareCall(query);\r\n\r\n            stmt.setString(1, String.valueOf(1));\r\n            stmt.setString(2, String.valueOf(Name));\r\n            stmt.setString(3, String.valueOf(grade));\r\n            stmt.execute();\r\n\r\n\r\n            query = \"SELECT LAST_INSERT_ID();\" ;\r\n            stmt = con.prepareCall(query);\r\n            boolean HadResult = stmt.execute();\r\n            if(!HadResult){\r\n                System.exit(1);\r\n            }\r\n            ResultSet res = stmt.getResultSet();\r\n            res.next();\r\n            Id = res.getInt(1);\r\n\r\n\r\n            for(Question quest : Questions)\r\n            {\r\n                query = \"INSERT INTO question(test_id,question) VALUES(?,?);\";\r\n                stmt = con.prepareCall(query);\r\n                stmt.setString(1, String.valueOf(Id));\r\n                stmt.setString(2, String.valueOf(quest.question));\r\n                stmt.execute();\r\n\r\n                query = \"SELECT LAST_INSERT_ID();\" ;\r\n                stmt = con.prepareCall(query);\r\n                HadResult = stmt.execute();\r\n                if(!HadResult){\r\n                    System.exit(1);\r\n                }\r\n                res = stmt.getResultSet();\r\n                res.next();\r\n                int TempId = res.getInt(1);\r\n                quest.setId(TempId);\r\n            }\r\n            res.close();\r\n            con.close();\r\n\r\n        } catch (SQLException throwables) {\r\n            throwables.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get specific quiz from the database by quiz id\r\n     * @param id\r\n     */\r\n    public void GetSpecificQuizFromDB(int id)\r\n    {\r\n        Connection con = ZeroDawnDatabase.GetDbCon();\r\n\r\n        if (con == null) {\r\n            System.exit(1);\r\n        }\r\n\r\n        try{\r\n            String query = \"select * from test where test_id = ?;\";\r\n            PreparedStatement stmt = con.prepareCall(query);\r\n            stmt.setInt(1, id);\r\n            boolean HadResult = stmt.execute();\r\n            if(HadResult){\r\n                ResultSet res = stmt.getResultSet();\r\n                res.next();\r\n                Id = res.getInt(1);\r\n                isActive = res.getBoolean(2);\r\n                Name = res.getString(3);\r\n                grade = res.getInt(4);\r\n            }\r\n\r\n            query = \"select * from question where test_id = ?;\";\r\n            stmt = con.prepareCall(query);\r\n            stmt.setInt(1, id);\r\n            HadResult = stmt.execute();\r\n            if(HadResult){\r\n                ResultSet res = stmt.getResultSet();\r\n                while(res.next()) {\r\n                    Questions.add(new Question(\r\n                        res.getInt(1), res.getString(3), res.getInt(2)\r\n                    ));\r\n                }\r\n                res.close();\r\n            }\r\n\r\n            con.close();\r\n        }catch (SQLException throwables) {\r\n            if(throwables.getErrorCode() == 0){\r\n                this.Id = 0;\r\n            }\r\n            else{\r\n                throwables.printStackTrace();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Remove specific quiz from the database\r\n     * @param id\r\n     */\r\n    public static void RemoveSpecificQuiz(int id)\r\n    {\r\n\r\n        Connection con = ZeroDawnDatabase.GetDbCon();\r\n\r\n        if (con == null) {\r\n            System.exit(1);\r\n        }\r\n        try{\r\n            String query = \"delete from test where test_id = ?;\";\r\n            PreparedStatement stmt = con.prepareCall(query);\r\n            stmt.setString(1, String.valueOf(id));\r\n            stmt.execute();\r\n            con.close();\r\n        }catch (SQLException throwables) {\r\n            throwables.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Remove This quiz from the database\r\n     */\r\n    public void RemoveThisQuiz()\r\n    {\r\n\r\n        Connection con = ZeroDawnDatabase.GetDbCon();\r\n\r\n        if (con == null) {\r\n            System.exit(1);\r\n        }\r\n        try{\r\n            String query = \"delete from test where test_id = ?;\";\r\n            PreparedStatement stmt = con.prepareCall(query);\r\n            stmt.setString(1, String.valueOf(this.getId()));\r\n            stmt.execute();\r\n            con.close();\r\n        }catch (SQLException throwables) {\r\n\r\n            throwables.printStackTrace();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Update this isActive to false in the database\r\n     */\r\n    public void UpdateIsActive(){\r\n        Connection con = ZeroDawnDatabase.GetDbCon();\r\n\r\n        if (con == null) {\r\n            System.exit(1);\r\n        }\r\n        try{\r\n            String query = \"update test set is_active = 0 where test_id = ?;\";\r\n            PreparedStatement stmt = con.prepareCall(query);\r\n            stmt.setString(1, String.valueOf(this.getId()));\r\n            stmt.execute();\r\n            con.close();\r\n        }catch (SQLException throwables) {\r\n            throwables.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void EditName(String NewName){\r\n\r\n        Connection con = ZeroDawnDatabase.GetDbCon();\r\n\r\n        if (con == null) {\r\n            System.exit(1);\r\n        }\r\n        try{\r\n            String query = \"update test set test_name = ? where test_id = ?;\";\r\n            PreparedStatement stmt = con.prepareCall(query);\r\n            stmt.setString(1, NewName);\r\n            stmt.setString(2, String.valueOf(this.getId()));\r\n            stmt.execute();\r\n            con.close();\r\n            this.Name = NewName;\r\n        }catch (SQLException throwables) {\r\n            throwables.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    public static ArrayList<Quiz> GetQuizList(){\r\n\r\n        ArrayList<Quiz> Quizzes = new ArrayList<Quiz>();\r\n\r\n        Connection con = ZeroDawnDatabase.GetDbCon();\r\n        if (con == null) {\r\n            System.exit(1);\r\n        }\r\n\r\n        try{\r\n            String query = \"select test_id, is_active, test_name, grade from test;\";\r\n            PreparedStatement stmt = con.prepareCall(query);\r\n            boolean HadResult = stmt.execute();\r\n            if(HadResult){\r\n                ResultSet res = stmt.getResultSet();\r\n                while(res.next()){\r\n                    Quizzes.add(new Quiz(res.getInt(1), res.getBoolean(2), res.getString(3),res.getInt(4)));\r\n                }\r\n                res.close();\r\n            }\r\n            con.close();\r\n        }catch (SQLException throwables) {\r\n            throwables.printStackTrace();\r\n        }\r\n\r\n        return Quizzes;\r\n\r\n    }\r\n\r\n    public void EditQuestions(){\r\n\r\n        Scanner in = new Scanner(System.in);\r\n        System.out.println(\"Select Question to Edit\");\r\n        int i = 1;\r\n        for(Question Quest : this.Questions){\r\n            System.out.println(i + \". \" +Quest.question);\r\n            i++;\r\n        }\r\n\r\n        int choice;\r\n        System.out.println(\"Please choice question to edit\");\r\n        choice = in.nextInt();\r\n        while(choice < 1 || choice > i){\r\n            System.out.println(\"Invalid choice please try again\");\r\n            choice = in.nextInt();\r\n        }\r\n        in.nextLine();\r\n        String confirm, NewQuestion;\r\n        do{\r\n            System.out.println(\"Enter New Question\");\r\n            NewQuestion = in.nextLine();\r\n            System.out.println(\"Press Y to confirm\");\r\n            confirm = in.nextLine();\r\n            confirm = confirm.toLowerCase();\r\n        }while(!confirm.equals(\"y\"));\r\n\r\n        Questions.get(choice-1).EditQuestion(NewQuestion);\r\n        System.out.println(\"Question Has Been Update\");\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/test/Quiz.java b/src/main/java/test/Quiz.java
--- a/src/main/java/test/Quiz.java	(revision 7d1037419dc502caab8a7a3e492db9276f6883d1)
+++ b/src/main/java/test/Quiz.java	(date 1622716798302)
@@ -356,8 +356,7 @@
         return Quizzes;
 
     }
-
-    public void EditQuestions(){
+        public void EditQuestions(){
 
         Scanner in = new Scanner(System.in);
         System.out.println("Select Question to Edit");
Index: src/main/java/users/Student.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package users;\r\n\r\nimport Database.ZeroDawnDatabase;\r\nimport test.Question;\r\nimport test.Quiz;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n/*\r\nStudent class\r\n */\r\npublic class Student extends User {\r\n    int grade;\r\n\r\n    public Student() {\r\n    }\r\n\r\n    public Student(String StudentsID, String password, String lname, String fname, Date birth_date, String email, int grade) {\r\n        super(StudentsID, password, lname, fname, birth_date, email);\r\n        this.grade = grade;\r\n    }\r\n\r\n    public void SignUp(String Id, String Password, String FirstName, String LastName, Date BirthDate,\r\n                       String email, int grade) {\r\n        Connection con = ZeroDawnDatabase.GetDbCon();\r\n        if (con == null) {\r\n            System.exit(1);\r\n        }\r\n        try {\r\n            String query = \"INSERT INTO users Values(?,?,?,?,?,?)\";\r\n            PreparedStatement stmt = con.prepareCall(query);\r\n\r\n            this.UserID = Id;\r\n            stmt.setString(1, Id);\r\n            this.password = Password;\r\n            stmt.setString(2, Password);\r\n            this.fname = FirstName;\r\n            stmt.setString(3, FirstName);\r\n            this.lname = LastName;\r\n            stmt.setString(4, LastName);\r\n            this.birth_date = BirthDate;\r\n            stmt.setString(5, BirthDate.toString());\r\n            this.email = email;\r\n            stmt.setString(6, email);\r\n\r\n            stmt.execute();\r\n\r\n            query = \"INSERT INTO student Values(?,?)\";\r\n            stmt = con.prepareCall(query);\r\n            stmt.setString(1, Id);\r\n            this.grade = grade;\r\n            stmt.setInt(2, grade);\r\n            stmt.execute();\r\n            con.close();\r\n        } catch (SQLException throwables) {\r\n            throwables.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void start_test1(String ans[][]){\r\n        Scanner in = new Scanner(System.in);\r\n        Quiz quiz = new Quiz();\r\n        quiz.GetSpecificQuizFromDB(Integer.parseInt(ans[0][0]));\r\n        for (int i = 0; i < quiz.getQuestions().size(); i++) {\r\n            String quiz_id=ans[i][0];\r\n            String UserID = ans[i][1];\r\n            String Q_id = ans[i][2];\r\n            String ansr = ans[i][3];\r\n            Connection con = ZeroDawnDatabase.GetDbCon();\r\n            if (con == null) {\r\n                System.exit(1);\r\n            }\r\n            try {\r\n                String query = \"INSERT INTO start_test(test_id,user_id,question_id,ans) Values(?,?,?,?)\";\r\n                PreparedStatement stmt = con.prepareCall(query);\r\n                stmt.setString(1, String.valueOf(quiz_id));\r\n                stmt.setString(2, UserID);\r\n                stmt.setString(3,Q_id);\r\n                stmt.setInt(4, Integer.parseInt(ansr));\r\n                stmt.execute();\r\n                con.close();\r\n            } catch (SQLException throwables) {\r\n                throwables.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    public String[][] start_test() {\r\n        String[][] AnswersCntainer = new String[10][5];\r\n        Scanner in = new Scanner(System.in);\r\n        int CH;\r\n        System.out.println(\"---------------Welcome---------------\");\r\n        System.out.println(\"to start a new test Press 1\");\r\n        System.out.println(\"to exit Press 0\");\r\n        CH = in.nextInt();\r\n        while (CH != 0 && CH != 1) {\r\n                System.out.println(\"You have selected a wrong number, please select again:\");\r\n                CH = in.nextInt();\r\n                System.out.println(\"to start a test Press 1\");\r\n                System.out.println(\"to exit Press 0\");\r\n            }\r\n        if (CH == 1) {\r\n            ArrayList<Quiz> Quizzes = Quiz.GetQuizList();\r\n            System.out.println(\"----List Of Tests----\");\r\n            ArrayList<Integer> id_test = new ArrayList<>();\r\n            for (Quiz quiz : Quizzes) {\r\n                if (quiz.isActive() && quiz.getGrade() == grade) {\r\n                    System.out.println(quiz.getId() + \". \" + quiz.getName());\r\n                    id_test.add(quiz.getId());\r\n                }\r\n            }\r\n            int choice;\r\n            int j=0,flag1=0;\r\n            System.out.println(\"Choose test:\");\r\n            Quiz quiz = new Quiz();\r\n            while (j<1) {\r\n                choice = in.nextInt();\r\n                for (int num : id_test) {\r\n                    if (num == choice) {\r\n                        flag1=1;\r\n                        quiz.GetSpecificQuizFromDB(choice);\r\n                        if (quiz.getId() == 0) {\r\n                            System.out.println(\"Invalid Test ID\");\r\n                            return AnswersCntainer;\r\n                        }\r\n                    }\r\n                }\r\n                if (flag1 == 1) {\r\n                    break;\r\n                }\r\n                System.out.println(\"You entered a wrong number, please select again\");\r\n            }\r\n\r\n            int a = 1;\r\n            for (int i = 0; i < quiz.getQuestions().size(); i++) {\r\n                int Q_id = quiz.getQuestions().get(i).getId();\r\n                String Q = quiz.getQuestions().get(i).getQuestion();\r\n                int quiz_id = quiz.getId();\r\n                AnswersCntainer[i][0] = String.valueOf(quiz_id);\r\n                AnswersCntainer[i][1] = String.valueOf(UserID);\r\n                AnswersCntainer[i][2] = String.valueOf(Q_id);\r\n                System.out.println(\"Q number \" + a + \" : \");\r\n                System.out.println(Q);\r\n                System.out.println(\"Please select an answer: \");\r\n                System.out.println(\"1. is a \");\r\n                System.out.println(\"2. as a \");\r\n                System.out.println(\"3. dont know\");\r\n                System.out.println(\"4. all\");\r\n                int Ans = in.nextInt();\r\n                while(Ans!=1 && Ans!=2 && Ans!=3 && Ans!=4)\r\n                {\r\n                    System.out.println(\"You have selected a wrong number, please select again:\");\r\n                    System.out.println(\"Q number \" + a + \" : \");\r\n                    System.out.println(Q);\r\n                    System.out.println(\"Please select an answer: \");\r\n                    System.out.println(\"1. is a \");\r\n                    System.out.println(\"2. as a \");\r\n                    System.out.println(\"3. dont know\");\r\n                    System.out.println(\"4. all\");\r\n                    Ans = in.nextInt();\r\n                }\r\n                AnswersCntainer[i][3] = String.valueOf(Ans);\r\n                AnswersCntainer[i][4] = Q;\r\n                int flag=1;\r\n                int temp_choice=0;\r\n                while (flag==1) {\r\n                    System.out.println(\"if you want to update your last answer press 1\");\r\n                    System.out.println(\"if you want to continue to the next Question press 2\");\r\n                    temp_choice = in.nextInt();\r\n                    if(temp_choice==1 || temp_choice==2){\r\n                        flag=0;\r\n                    }\r\n                }\r\n                if(temp_choice==1){\r\n                    while(Ans!=1 && Ans!=2 && Ans!=3 && Ans!=4) {\r\n                        System.out.println(\"You have selected a wrong number, please select again:\");\r\n                        System.out.println(\"Q number \" + a + \" : \");\r\n                        System.out.println(Q);\r\n                        System.out.println(\"Please select an answer: \");\r\n                        System.out.println(\"1. is a \");\r\n                        System.out.println(\"2. as a \");\r\n                        System.out.println(\"3. dont know\");\r\n                        System.out.println(\"4. all\");\r\n                        Ans = in.nextInt();\r\n                        AnswersCntainer[i][3] = String.valueOf(Ans);\r\n                    }\r\n                }\r\n                a++;\r\n                if(i+1==quiz.getQuestions().size())\r\n                {\r\n                    System.out.println(\"You have completed the quiz \");\r\n                }\r\n            }\r\n            return AnswersCntainer;\r\n        }\r\n        else{\r\n            return AnswersCntainer;\r\n        }\r\n    }\r\n\r\n\r\n    public void start_test2()\r\n    {\r\n        start_test1(start_test());\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/users/Student.java b/src/main/java/users/Student.java
--- a/src/main/java/users/Student.java	(revision 7d1037419dc502caab8a7a3e492db9276f6883d1)
+++ b/src/main/java/users/Student.java	(date 1622717740256)
@@ -205,4 +205,48 @@
     {
         start_test1(start_test());
     }
+
+
+    public void feedback(){
+        Quiz quiz = new Quiz();
+        System.out.println("Please enter the number of the Quiz you would like to provide feedback on: ");
+        ArrayList<Quiz> temp = quiz.GetQuizList();
+        for (Quiz quiz : temp) {
+            if (quiz.isActive() && quiz.getGrade() == grade) {
+                System.out.println(quiz.getId() + ". " + quiz.getName());
+                id_test.add(quiz.getId());
+            }
+            quiz.GetSpecificQuizFromDB();
+
+    }
+
+    /*public static ArrayList<Quiz> GetQuizListByStudent() {
+
+        ArrayList<Quiz> Quizzes = new ArrayList<Quiz>();
+
+        Connection con = ZeroDawnDatabase.GetDbCon();
+        if (con == null) {
+            System.exit(1);
+        }
+
+        try {
+            String query = "select test_id from test T, start_test S where S.test_id=T.test_id and S.user_id=(select user_id from student) ;";
+            PreparedStatement stmt = con.prepareCall(query);
+            boolean HadResult = stmt.execute();
+            if (HadResult) {
+                ResultSet res = stmt.getResultSet();
+                while (res.next()) {
+                    Quizzes.add(new Quiz(res.getInt(1), res.getBoolean(2), res.getString(3), res.getInt(4)));
+                }
+                res.close();
+            }
+            con.close();
+        } catch (SQLException throwables) {
+            throwables.printStackTrace();
+        }
+
+        return Quizzes;
+    }*/
+
+
 }
\ No newline at end of file
